import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from datetime import datetime, timedelta
import sqlite3
import re
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DB_PATH = 'reminders.db'

# ---------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ----------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS reminders
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       chat_id INTEGER,
                       reminder_text TEXT,
                       reminder_date TEXT)''')
    conn.commit()
    conn.close()

def add_reminder(chat_id, text, date):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO reminders (chat_id, reminder_text, reminder_date) VALUES (?, ?, ?)",
                   (chat_id, text, date))
    conn.commit()
    conn.close()

def get_reminders(chat_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, reminder_text, reminder_date FROM reminders WHERE chat_id = ? ORDER BY reminder_date", (chat_id,))
    reminders = cursor.fetchall()
    conn.close()
    return reminders

def delete_reminder(reminder_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM reminders WHERE id = ?", (reminder_id,))
    conn.commit()
    conn.close()

def update_reminder(reminder_id, new_text=None, new_date=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    if new_text and new_date:
        cursor.execute("UPDATE reminders SET reminder_text = ?, reminder_date = ? WHERE id = ?", (new_text, new_date, reminder_id))
    elif new_text:
        cursor.execute("UPDATE reminders SET reminder_text = ? WHERE id = ?", (new_text, reminder_id))
    elif new_date:
        cursor.execute("UPDATE reminders SET reminder_date = ? WHERE id = ?", (new_date, reminder_id))
    conn.commit()
    conn.close()

# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ----------
def check_reminders(context: CallbackContext):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M")
    cursor.execute("SELECT id, chat_id, reminder_text FROM reminders WHERE reminder_date <= ?", (now,))
    reminders = cursor.fetchall()
    for reminder in reminders:
        try:
            context.bot.send_message(chat_id=reminder[1], text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder[2]}")
            cursor.execute("DELETE FROM reminders WHERE id = ?", (reminder[0],))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    conn.commit()
    conn.close()

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
        "–î–æ–±–∞–≤–ª—è–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú —Ç–µ–∫—Å—Ç\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/edit - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/snooze - –æ—Ç–ª–æ–∂–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ\n"
        "/clear - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å"
    )

def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥:\n\n"
        "/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/delete <–Ω–æ–º–µ—Ä> - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/edit <–Ω–æ–º–µ—Ä> <–î–î.MM.–ì–ì–ì–ì –ß–ß:–ú–ú —Ç–µ–∫—Å—Ç> - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/snooze <10m/1h/1d> - –æ—Ç–ª–æ–∂–∏—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/clear - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )

def handle_message(update: Update, context: CallbackContext):
    try:
        text = update.message.text
        chat_id = update.message.chat.id

        match = re.match(r'(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}) (.+)', text)
        if match:
            date_str, reminder_text = match.groups()
            reminder_date_local = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
            # –ü–µ—Ä–µ–≤–æ–¥ –≤ UTC (–Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è +3)
            reminder_date_utc = reminder_date_local - timedelta(hours=3)
            reminder_date = reminder_date_utc.strftime("%Y-%m-%d %H:%M")
            add_reminder(chat_id, reminder_text, reminder_date)
            update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {date_str}!")
        else:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä:\n'15.08.2025 14:00 –ü–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ handle_message: {e}")
        update.message.reply_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")

def list_reminders(update: Update, context: CallbackContext):
    chat_id = update.message.chat.id
    reminders = get_reminders(chat_id)
    if not reminders:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç.")
        return
    msg = "\n".join([f"{i+1}. {r[2]} - {r[1]}" for i, r in enumerate(reminders)])
    update.message.reply_text(msg)

def delete_command(update: Update, context: CallbackContext):
    try:
        idx = int(context.args[0]) - 1
        chat_id = update.message.chat.id
        reminders = get_reminders(chat_id)
        if idx < 0 or idx >= len(reminders):
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return
        delete_reminder(reminders[idx][0])
        update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except (IndexError, ValueError):
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–Ω–æ–º–µ—Ä>")

# ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------
def main():
    init_db()
    TOKEN = os.environ.get("BOT_TOKEN")
    updater = Updater(TOKEN, use_context=True)

    updater.bot.delete_webhook()

    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("list", list_reminders))
    dp.add_handler(CommandHandler("delete", delete_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    job_queue = updater.job_queue
    job_queue.run_repeating(check_reminders, interval=60, first=0)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
    
